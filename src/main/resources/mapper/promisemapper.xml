<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fromits.app.repository.PromiseRepository">
    <insert id="insert" parameterType="PromiseDto" useGeneratedKeys="true" keyProperty="proId" >
        insert into promise(pro_id, group_id, pro_name, pro_desc, pro_lat, pro_lon, pro_date, candidate_id) values(0, #{groupId}, #{proName},#{proDesc}, #{proLat}, #{proLon}, NOW(), null);
    </insert>

    <!--확정된 약속 후보들 가져오기-->
    <select id = "getConfirmPromise" parameterType="PromiseListDto">
        SELECT p.pro_id as pro_id, p.pro_name as pro_name, p.group_id as group_id,
               g.group_name as group_name, p.pro_date as pro_date,
               c.place_address as place_address, c.place_name as place_name
        FROM user u
                 JOIN group_member gm ON u.user_id = gm.user_id
                 JOIN prom_group g ON g.group_id = gm.group_id
                 JOIN promise p ON gm.group_id = p.group_id
                 JOIN devote d ON p.pro_id = d.pro_id
                 JOIN devote_candidate c ON p.candidate_id = c.candidate_id
        WHERE u.user_id = #{userId}
          AND d.devote_state = 3;
    </select>

    <select id="selectOne" resultType="PromiseDto">
        SELECT *
        FROM promise
        WHERE pro_id = #{param1}
    </select>

    <select id="getEmailsbyProId" resultType="String">
        select distinct(email)
        from user a join
             (select user_id
              from group_member
              where group_id = (SELECT group_id FROM fromits.devote
                                where pro_id = #{param1})) b on (a.user_id = b.user_id);
    </select>

    <select id = "getPromise" parameterType="PromiseDto">
        SELECT * from promise
        where group_id = (SELECT group_id FROM group_member
                          where user_id=#{param})
    </select>

    <select id="getCount" resultType="Integer">
        SELECT count(user_id)
        FROM group_member
        WHERE group_id = (
            SELECT group_id
            FROM promise
            WHERE pro_id = (
                SELECT pro_id
                FROM devote
                WHERE devote_id = #{param1}
            )
        )
          AND user_id NOT IN (
            SELECT DISTINCT user_id
            FROM devote_candidate
            WHERE devote_id = #{param1}
        );
    </select>

    <!--투표 결과 구하기-->
    <select id="finalplace" parameterType="Integer">
        SELECT dc.place_name, dc.place_address, dc.candidate_id, v.devote_id, COUNT(v.devote_id) AS total_votes, dc.pro_now AS registration_date
        FROM devote_candidate dc
                 JOIN vote v ON dc.devote_id = v.devote_id
        WHERE dc.devote_id = #{devoteId}
        GROUP BY dc.candidate_id, dc.place_name, dc.pro_now
        ORDER BY total_votes DESC, dc.pro_now ASC
            LIMIT 1;
    </select>

    <!--투표된 최종 약속 장소의 아이디를 약속 테이블에 저장-->
    <update id="updateResult" parameterType="map">
        update promise set candidate_id=#{candidateId} where pro_id=#{proId};
    </update>

    <!--최종약속 만들기 위해 이전 필요한 정보들 조인해서 가져옴 -->
    <select id="finalPromiseInfo" parameterType="Integer" resultType="FinalPromiseDto">
        SELECT d.place_address, a.pro_name, a.pro_desc, a.group_name
        FROM devote_candidate d
                 JOIN (
            SELECT p.pro_id, p.pro_name, p.pro_desc, p.group_id, g.group_name, p.candidate_id
            FROM promise p
                     JOIN prom_group g ON p.group_id = g.group_id
        ) a ON d.candidate_id = a.candidate_id
        WHERE pro_id = #{proId};
    </select>

    <!--일정받아서 최종 약속-->
    <update id="finalPromiseSchedule" parameterType="map">
        update promise set pro_date=#{proDate} where pro_id=#{proId};
    </update>

    <!-- 최종 약속 수정-->
    <update id="updateMeeting" parameterType="map">
        UPDATE promise
        SET pro_desc = #{proDesc}
        WHERE pro_id = #{proId}
    </update>

    <!-- 약속 삭제 -->
    <delete id="deleteMeeting" parameterType="int">
        DELETE FROM promise
        WHERE pro_id = #{proId}
    </delete>




</mapper>